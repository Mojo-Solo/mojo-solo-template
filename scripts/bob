#!/usr/bin/env bash

# BOB - Mojo Solo CLI Wrapper
# The sole wrapper CLI for all operations (per MojoDevProcess.md)

set -e

COMMAND=$1
shift

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Helper functions
log_info() {
    echo -e "${GREEN}[BOB]${NC} $1"
}

log_error() {
    echo -e "${RED}[BOB ERROR]${NC} $1" >&2
}

log_warning() {
    echo -e "${YELLOW}[BOB WARNING]${NC} $1"
}

# Main command handler
case "$COMMAND" in
    "run")
        ENV=$1
        case "$ENV" in
            "dev")
                log_info "Starting development environment..."
                # Seed .env.local if needed
                if [ ! -f .env.local ]; then
                    log_info "Creating .env.local from AWS Secrets..."
                    aws-vault exec dev -- aws secretsmanager get-secret-value \
                        --secret-id /mojosolo/$(basename $PWD)/dev/env \
                        --query SecretString --output text > .env.local
                fi
                # Start appropriate dev server
                if [ -f "package.json" ]; then
                    npm run dev
                elif [ -f "artisan" ]; then
                    php artisan serve
                else
                    log_error "No recognized project type found"
                    exit 1
                fi
                ;;
            *)
                log_error "Unknown environment: $ENV"
                exit 1
                ;;
        esac
        ;;
        
    "storybook")
        log_info "Starting Storybook..."
        if [ -f "package.json" ] && grep -q "storybook" package.json; then
            npm run storybook
        else
            log_error "Storybook not configured in this project"
            exit 1
        fi
        ;;
        
    "lint")
        log_info "Running linters..."
        # Run appropriate linters based on project type
        if [ -f "package.json" ]; then
            npm run lint || exit 1
            [ -f "tsconfig.json" ] && npm run typecheck || exit 1
        fi
        if [ -f "composer.json" ]; then
            ./vendor/bin/phpstan analyse || exit 1
            ./vendor/bin/php-cs-fixer fix --dry-run || exit 1
        fi
        log_info "Lint checks passed!"
        ;;
        
    "test")
        log_info "Running tests..."
        if [ -f "package.json" ] && grep -q "test" package.json; then
            npm test
        elif [ -f "phpunit.xml" ] || [ -f "phpunit.xml.dist" ]; then
            ./vendor/bin/phpunit
        else
            log_warning "No test suite found"
        fi
        ;;
        
    "e2e")
        log_info "Running Playwright E2E tests..."
        if [ -f "playwright.config.js" ] || [ -f "playwright.config.ts" ]; then
            npx playwright test
        else
            log_error "Playwright not configured. See MojoDevProcess.md"
            exit 1
        fi
        ;;
        
    "db:backup")
        log_info "Creating database backup..."
        BACKUP_NAME="backup-$(date +%Y%m%d-%H%M%S).sql"
        if [ -f "artisan" ]; then
            php artisan db:backup --filename=$BACKUP_NAME
        else
            log_error "Database backup not implemented for this project type"
            exit 1
        fi
        log_info "Backup created: $BACKUP_NAME"
        ;;
        
    "db:restore")
        DATE=$1
        if [ -z "$DATE" ]; then
            log_error "Usage: bob db:restore --date=YYYY-MM-DD"
            exit 1
        fi
        log_info "Restoring database from $DATE..."
        # Implementation depends on backup storage
        log_warning "db:restore implementation pending"
        ;;
        
    "deploy:rollback")
        ENV=$1
        if [[ "$ENV" != "--env=prod" && "$ENV" != "--env=staging" ]]; then
            log_error "Usage: bob deploy:rollback --env=prod|staging"
            exit 1
        fi
        log_info "Rolling back deployment..."
        # Forge-specific rollback
        log_warning "deploy:rollback implementation pending - use Forge UI"
        ;;
        
    "help"|"--help"|"-h"|"")
        echo "BOB - Mojo Solo CLI Wrapper"
        echo ""
        echo "Usage: bob <command> [options]"
        echo ""
        echo "Commands:"
        echo "  run dev          Start development environment"
        echo "  storybook        Start Storybook UI library"
        echo "  lint             Run all linters"
        echo "  test             Run unit and integration tests"
        echo "  e2e              Run Playwright E2E tests"
        echo "  db:backup        Create database backup"
        echo "  db:restore       Restore database from backup"
        echo "  deploy:rollback  Rollback deployment"
        echo ""
        echo "All commands follow MojoDevProcess.md standards"
        ;;
        
    *)
        log_error "Unknown command: $COMMAND"
        echo "Run 'bob help' for available commands"
        exit 1
        ;;
esac