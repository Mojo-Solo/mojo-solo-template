name: PR Feedback

on:
  pull_request:
    types: [opened, synchronize]
  workflow_run:
    workflows: ["Required CI Checks", "E2E Tests (Playwright)"]
    types: [completed]

permissions:
  contents: read
  pull-requests: write
  deployments: read

jobs:
  pr-summary:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Gather PR metrics
        id: metrics
        run: |
          # Get file statistics
          echo "files_changed=$(git diff --name-only origin/${{ github.base_ref }}..HEAD | wc -l)" >> $GITHUB_OUTPUT
          echo "additions=$(git diff --numstat origin/${{ github.base_ref }}..HEAD | awk '{sum += $1} END {print sum}')" >> $GITHUB_OUTPUT
          echo "deletions=$(git diff --numstat origin/${{ github.base_ref }}..HEAD | awk '{sum += $2} END {print sum}')" >> $GITHUB_OUTPUT
          
          # Check for specific file types
          echo "has_tests=$(git diff --name-only origin/${{ github.base_ref }}..HEAD | grep -E '\.(test|spec)\.(js|ts|tsx)$' | wc -l)" >> $GITHUB_OUTPUT
          echo "has_docs=$(git diff --name-only origin/${{ github.base_ref }}..HEAD | grep -E '\.(md|mdx)$' | wc -l)" >> $GITHUB_OUTPUT

      - name: Get Vercel preview URL
        id: vercel
        run: |
          # Wait a bit for Vercel to start deployment
          sleep 10
          
          # Try to get Vercel deployment URL
          DEPLOYMENT_URL=$(gh api repos/${{ github.repository }}/deployments \
            --jq '.[] | select(.environment == "Preview") | .statuses_url' \
            | head -1 \
            | xargs -I {} gh api {} \
            --jq '.[0].target_url' || echo "")
          
          echo "preview_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create or update PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const { files_changed, additions, deletions, has_tests, has_docs } = ${{ toJson(steps.metrics.outputs) }};
            const preview_url = '${{ steps.vercel.outputs.preview_url }}';
            
            // Calculate code quality score
            const hasTests = parseInt(has_tests) > 0;
            const hasDocs = parseInt(has_docs) > 0;
            const ratio = parseInt(deletions) / (parseInt(additions) || 1);
            const codeQuality = ratio > 0.3 ? '🟢 Good' : '🟡 Review needed';
            
            const body = `## 📊 PR Summary

            ### 📈 Metrics
            - **Files changed**: ${files_changed}
            - **Lines added**: +${additions || 0}
            - **Lines removed**: -${deletions || 0}
            - **Code quality**: ${codeQuality} (deletion ratio: ${ratio.toFixed(2)})
            
            ### ✅ Automated Checks
            - 🔍 **Pre-commit hooks**: ${context.payload.pull_request ? '✅ Passed' : '⏳ Running...'}
            - 🧹 **Auto-linting**: ✅ Applied
            - 🧪 **Tests included**: ${hasTests ? '✅ Yes' : '❌ No'}
            - 📚 **Docs updated**: ${hasDocs ? '✅ Yes' : '⚠️ No'}
            
            ### 🔗 Preview Links
            ${preview_url ? `- 🌐 **[Vercel Preview](${preview_url})**` : '- 🌐 **Vercel**: ⏳ Deploying...'}
            - 📖 **[Storybook](https://storybook.mojo-solo.com/${context.payload.pull_request.head.ref})**: ${hasTests ? '🚀 Ready' : '⏳ Building...'}
            
            ### 👀 Review Checklist
            - [ ] Code follows [Mojo Solo standards](https://github.com/Mojo-Solo/mojo-solo-template/blob/main/MojoDevProcess.md)
            - [ ] No console.logs in production code
            - [ ] All TODOs have issue numbers
            - [ ] Tests are passing
            - [ ] Documentation updated (if needed)
            
            ### 🤖 Available Commands
            Comment on this PR with:
            - \`/rerun-checks\` - Re-run all CI checks
            - \`/deploy-staging\` - Deploy to staging environment
            - \`/request-review @username\` - Request specific reviewer
            
            ---
            <sub>🤖 Generated by [Mojo Bot](https://github.com/Mojo-Solo/mojo-solo-template) • [Configure](https://github.com/Mojo-Solo/mojo-solo-template/blob/main/EFFICIENCY_SETUP.md)</sub>`;
            
            // Find existing comment
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('PR Summary')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

  update-status:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run'
    
    steps:
      - name: Update PR comment with test results
        uses: actions/github-script@v7
        with:
          script: |
            // Get PR number from workflow run
            const pr = context.payload.workflow_run.pull_requests[0];
            if (!pr) return;
            
            const status = context.payload.workflow_run.conclusion;
            const workflow = context.payload.workflow_run.name;
            
            // Update the PR comment with test results
            const comments = await github.rest.issues.listComments({
              issue_number: pr.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('PR Summary')
            );
            
            if (botComment) {
              // Update status in existing comment
              let newBody = botComment.body;
              const statusEmoji = status === 'success' ? '✅' : '❌';
              
              if (workflow.includes('CI Checks')) {
                newBody = newBody.replace(/- 🧪 \*\*Tests\*\*: .+/, `- 🧪 **Tests**: ${statusEmoji} ${status}`);
              } else if (workflow.includes('E2E')) {
                newBody = newBody.replace(/- 🎭 \*\*E2E Tests\*\*: .+/, `- 🎭 **E2E Tests**: ${statusEmoji} ${status}`);
              }
              
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: newBody
              });
            }